
---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="404 - Page Not Found" description="Oops! The page you're looking for doesn't exist. Play our endless running game while you're here!">
  <div class="min-h-screen bg-gradient-to-b from-cool-light-gray to-white dark:from-soft-charcoal dark:to-gray-900 flex flex-col items-center justify-center px-4">
    <!-- Game Container -->
    <div class="w-full max-w-4xl mx-auto text-center">
      <!-- Header -->
      <div class="mb-8">
        <h1 class="text-6xl font-bold text-electric-blue dark:text-teal mb-4">404</h1>
        <h2 class="text-2xl font-semibold text-soft-charcoal dark:text-cool-light-gray mb-2">Page Not Found</h2>
        <p class="text-gray-600 dark:text-gray-300 mb-6">Oops! While you're here, help our VR runner escape the digital void!</p>
      </div>

      <!-- Game Canvas -->
      <div class="relative bg-white dark:bg-gray-800 rounded-lg shadow-2xl border-4 border-electric-blue dark:border-teal p-4 mb-6">
        <canvas id="gameCanvas" class="w-full max-w-2xl mx-auto block rounded-lg bg-gradient-to-r from-blue-100 to-purple-100 dark:from-gray-700 dark:to-gray-600"></canvas>
        
        <!-- Game UI Overlay -->
        <div class="absolute top-6 left-6 right-6 flex justify-between items-start pointer-events-none">
          <div class="bg-black/70 text-white px-4 py-2 rounded-lg">
            <div class="text-sm">Score</div>
            <div id="score" class="text-xl font-bold">0</div>
          </div>
          <div class="bg-black/70 text-white px-4 py-2 rounded-lg">
            <div class="text-sm">Speed</div>
            <div id="speed" class="text-xl font-bold">1.0x</div>
          </div>
        </div>

        <!-- Game Over Screen -->
        <div id="gameOverScreen" class="absolute inset-0 bg-black/80 flex flex-col items-center justify-center text-white rounded-lg hidden">
          <div class="text-center">
            <h3 class="text-3xl font-bold mb-4">Game Over!</h3>
            <p class="text-lg mb-2">Final Score: <span id="finalScore" class="text-neon-yellow font-bold">0</span></p>
            <p class="text-lg mb-6">Distance: <span id="finalDistance" class="text-teal font-bold">0</span>m</p>
            <button id="restartBtn" class="button bg-electric-blue hover:bg-neon-yellow text-white hover:text-soft-charcoal px-6 py-3 rounded-lg font-semibold transition-all duration-200">
              Try Again
            </button>
          </div>
        </div>
      </div>

      <!-- Controls -->
      <div class="mb-6">
        <div class="flex flex-wrap justify-center gap-4 mb-4">
          <button id="startBtn" class="button bg-electric-blue hover:bg-neon-yellow text-white hover:text-soft-charcoal px-6 py-3 rounded-lg font-semibold">
            Start Game
          </button>
          <button id="jumpBtn" class="button bg-teal hover:bg-lime text-white hover:text-soft-charcoal px-6 py-3 rounded-lg font-semibold md:hidden">
            Jump
          </button>
        </div>
        <div class="text-sm text-gray-600 dark:text-gray-300">
          <p class="mb-1"><strong>Desktop:</strong> Press SPACE or ARROW UP to jump</p>
          <p><strong>Mobile:</strong> Tap the Jump button or tap anywhere on the screen</p>
        </div>
      </div>

      <!-- Back to Home -->
      <div class="text-center">
        <a href="/en" class="inline-block bg-lavender hover:bg-coral text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200">
          Back to Home
        </a>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
class EndlessRunnerGame {
  constructor() {
    this.canvas = document.getElementById('gameCanvas');
    this.ctx = this.canvas.getContext('2d');
    this.scoreElement = document.getElementById('score');
    this.speedElement = document.getElementById('speed');
    this.gameOverScreen = document.getElementById('gameOverScreen');
    this.finalScoreElement = document.getElementById('finalScore');
    this.finalDistanceElement = document.getElementById('finalDistance');
    
    this.setupCanvas();
    this.setupControls();
    this.init();
  }

  setupCanvas() {
    this.canvas.width = 800;
    this.canvas.height = 400;
    
    // Make canvas responsive
    const resizeCanvas = () => {
      const rect = this.canvas.getBoundingClientRect();
      const scaleX = this.canvas.width / rect.width;
      const scaleY = this.canvas.height / rect.height;
      this.canvas.style.cursor = 'pointer';
    };
    
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();
  }

  init() {
    this.gameRunning = false;
    this.score = 0;
    this.distance = 0;
    this.speed = 2;
    this.gameSpeed = 1;
    
    // Runner (VR headset wearer)
    this.runner = {
      x: 100,
      y: 280,
      width: 40,
      height: 60,
      velocityY: 0,
      jumping: false,
      onGround: true
    };
    
    // Obstacles
    this.obstacles = [];
    this.obstacleSpawnRate = 0.02;
    
    // Collectibles (VR goggles)
    this.collectibles = [];
    this.collectibleSpawnRate = 0.005;
    
    // Ground
    this.groundY = 340;
    this.groundPattern = [];
    this.initGroundPattern();
    
    this.draw();
  }

  initGroundPattern() {
    for (let i = 0; i < Math.ceil(this.canvas.width / 20) + 1; i++) {
      this.groundPattern.push(i * 20);
    }
  }

  setupControls() {
    // Keyboard controls
    document.addEventListener('keydown', (e) => {
      if (e.code === 'Space' || e.code === 'ArrowUp') {
        e.preventDefault();
        this.jump();
      }
    });

    // Mobile controls
    document.getElementById('jumpBtn').addEventListener('click', () => this.jump());
    this.canvas.addEventListener('click', () => this.jump());
    this.canvas.addEventListener('touchstart', (e) => {
      e.preventDefault();
      this.jump();
    });

    // Game controls
    document.getElementById('startBtn').addEventListener('click', () => this.startGame());
    document.getElementById('restartBtn').addEventListener('click', () => this.restartGame());
  }

  jump() {
    if (this.gameRunning && this.runner.onGround) {
      this.runner.velocityY = -12;
      this.runner.jumping = true;
      this.runner.onGround = false;
    }
  }

  startGame() {
    this.gameRunning = true;
    document.getElementById('startBtn').style.display = 'none';
    this.gameLoop();
  }

  restartGame() {
    this.gameOverScreen.classList.add('hidden');
    document.getElementById('startBtn').style.display = 'inline-block';
    this.init();
  }

  gameLoop() {
    if (!this.gameRunning) return;

    this.update();
    this.draw();
    
    requestAnimationFrame(() => this.gameLoop());
  }

  update() {
    // Update runner physics
    this.runner.velocityY += 0.8; // gravity
    this.runner.y += this.runner.velocityY;

    // Ground collision
    if (this.runner.y > this.groundY - this.runner.height) {
      this.runner.y = this.groundY - this.runner.height;
      this.runner.velocityY = 0;
      this.runner.jumping = false;
      this.runner.onGround = true;
    }

    // Spawn obstacles
    if (Math.random() < this.obstacleSpawnRate) {
      this.obstacles.push({
        x: this.canvas.width,
        y: this.groundY - 30,
        width: 20,
        height: 30,
        type: 'cactus'
      });
    }

    // Spawn collectibles
    if (Math.random() < this.collectibleSpawnRate) {
      this.collectibles.push({
        x: this.canvas.width,
        y: this.groundY - 80,
        width: 25,
        height: 25,
        type: 'vr'
      });
    }

    // Update obstacles
    this.obstacles = this.obstacles.filter(obstacle => {
      obstacle.x -= this.speed;
      
      // Collision detection
      if (this.checkCollision(this.runner, obstacle)) {
        this.gameOver();
        return false;
      }
      
      return obstacle.x > -obstacle.width;
    });

    // Update collectibles
    this.collectibles = this.collectibles.filter(collectible => {
      collectible.x -= this.speed;
      
      // Collection detection
      if (this.checkCollision(this.runner, collectible)) {
        this.score += 10;
        return false;
      }
      
      return collectible.x > -collectible.width;
    });

    // Update ground pattern
    this.groundPattern = this.groundPattern.map(x => x - this.speed);
    if (this.groundPattern[0] < -20) {
      this.groundPattern.shift();
      this.groundPattern.push(this.groundPattern[this.groundPattern.length - 1] + 20);
    }

    // Increase difficulty
    this.distance += this.speed;
    this.gameSpeed = 1 + Math.floor(this.distance / 500) * 0.2;
    this.speed = 2 * this.gameSpeed;
    this.obstacleSpawnRate = Math.min(0.02 + this.distance / 10000, 0.05);

    // Update score
    this.score += Math.floor(this.speed / 10);
    this.scoreElement.textContent = this.score;
    this.speedElement.textContent = this.gameSpeed.toFixed(1) + 'x';
  }

  checkCollision(rect1, rect2) {
    return rect1.x < rect2.x + rect2.width &&
           rect1.x + rect1.width > rect2.x &&
           rect1.y < rect2.y + rect2.height &&
           rect1.y + rect1.height > rect2.y;
  }

  draw() {
    // Clear canvas with gradient background
    const gradient = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);
    gradient.addColorStop(0, '#87CEEB'); // Sky blue
    gradient.addColorStop(1, '#98FB98'); // Pale green
    this.ctx.fillStyle = gradient;
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

    // Draw clouds
    this.drawClouds();

    // Draw ground
    this.ctx.fillStyle = '#8B4513';
    this.ctx.fillRect(0, this.groundY, this.canvas.width, this.canvas.height - this.groundY);
    
    // Draw ground pattern
    this.ctx.fillStyle = '#654321';
    this.groundPattern.forEach(x => {
      this.ctx.fillRect(x, this.groundY, 10, 5);
    });

    // Draw runner with VR headset
    this.drawRunner();

    // Draw obstacles
    this.obstacles.forEach(obstacle => this.drawObstacle(obstacle));

    // Draw collectibles
    this.collectibles.forEach(collectible => this.drawCollectible(collectible));
  }

  drawClouds() {
    this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
    // Static clouds for simplicity
    this.ctx.beginPath();
    this.ctx.arc(150, 80, 30, 0, Math.PI * 2);
    this.ctx.arc(170, 80, 40, 0, Math.PI * 2);
    this.ctx.arc(190, 80, 30, 0, Math.PI * 2);
    this.ctx.fill();

    this.ctx.beginPath();
    this.ctx.arc(500, 60, 25, 0, Math.PI * 2);
    this.ctx.arc(520, 60, 35, 0, Math.PI * 2);
    this.ctx.arc(540, 60, 25, 0, Math.PI * 2);
    this.ctx.fill();
  }

  drawRunner() {
    const { x, y, width, height } = this.runner;
    
    // Body
    this.ctx.fillStyle = '#FF6961'; // Coral
    this.ctx.fillRect(x + 10, y + 20, 20, 30);
    
    // Head
    this.ctx.fillStyle = '#FFB6C1';
    this.ctx.fillRect(x + 5, y, 30, 25);
    
    // VR Headset
    this.ctx.fillStyle = '#1E2430'; // Soft charcoal
    this.ctx.fillRect(x + 2, y + 5, 36, 15);
    
    // VR Headset detail (glowing effect)
    this.ctx.fillStyle = '#007BC5'; // Electric blue
    this.ctx.fillRect(x + 4, y + 7, 32, 11);
    
    // Arms
    this.ctx.fillStyle = '#FFB6C1';
    this.ctx.fillRect(x, y + 25, 8, 20);
    this.ctx.fillRect(x + 32, y + 25, 8, 20);
    
    // Legs
    this.ctx.fillStyle = '#4169E1';
    this.ctx.fillRect(x + 8, y + 50, 8, 15);
    this.ctx.fillRect(x + 24, y + 50, 8, 15);
    
    // Running animation (simple)
    if (this.gameRunning && this.runner.onGround) {
      const bounce = Math.sin(Date.now() * 0.02) * 2;
      this.ctx.translate(0, bounce);
      this.ctx.translate(0, -bounce);
    }
  }

  drawObstacle(obstacle) {
    this.ctx.fillStyle = '#228B22'; // Forest green
    this.ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
    
    // Add some detail to make it look like a digital barrier
    this.ctx.fillStyle = '#FFE600'; // Neon yellow
    this.ctx.fillRect(obstacle.x + 2, obstacle.y + 2, obstacle.width - 4, 4);
    this.ctx.fillRect(obstacle.x + 2, obstacle.y + obstacle.height - 6, obstacle.width - 4, 4);
  }

  drawCollectible(collectible) {
    const { x, y, width, height } = collectible;
    
    // VR Goggle collectible
    this.ctx.fillStyle = '#8F5CCC'; // Lavender
    this.ctx.fillRect(x, y, width, height);
    
    // Glowing effect
    this.ctx.fillStyle = '#46C3B8'; // Teal
    this.ctx.fillRect(x + 2, y + 2, width - 4, height - 4);
    
    // Floating animation
    const float = Math.sin(Date.now() * 0.01 + x * 0.01) * 3;
    this.ctx.translate(0, float);
    this.ctx.translate(0, -float);
  }

  gameOver() {
    this.gameRunning = false;
    this.finalScoreElement.textContent = this.score;
    this.finalDistanceElement.textContent = Math.floor(this.distance);
    this.gameOverScreen.classList.remove('hidden');
  }
}

// Initialize game when page loads
document.addEventListener('DOMContentLoaded', () => {
  new EndlessRunnerGame();
});
</script>
