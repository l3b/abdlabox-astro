---
// src/pages/en/index.astro - English Homepage Mirroring Arabic v14
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { Icon } from 'astro-icon/components';
import { BskyAgent, type ComAtprotoLabelDefs } from '@atproto/api';
import OptimizedImage from '../../components/OptimizedImage.astro';
import { formatDistanceToNow } from 'date-fns'; // For relative time
import { enUS } from 'date-fns/locale'; // For English relative time

const pageTitle = "The Base"; // English Title
const pageSubtitle = "A live snapshot from my digital world"; // English Subtitle
const pageDescription = "Abdullah's digital interface: Exploring ideas and experiences across various signals."; // English Description

// --- Fetch Latest ENGLISH Blog Post ---
let latestEnPost = null; // Renamed variable
try {
    latestEnPost = (await getCollection('blog', ({ data, slug }) => {
        // Filter for English posts now
        return slug.startsWith('en/') && data.isDraft !== true;
    })).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())[0];
    console.log("Found Latest English Blog Post:", latestEnPost?.data.title);
} catch (e) { console.error("Error fetching English blog post:", e); }


// --- Fetch Goodreads Currently Reading (Logic is language-agnostic) ---
interface ReadingBook { title: string; link: string; }
let currentlyReadingBooks: ReadingBook[] = [];
const GOODREADS_RSS_URL = "https://www.goodreads.com/review/list_rss/4693662?shelf=currently-reading";
const GOODREADS_PROFILE_URL = "https://www.goodreads.com/user/show/4693662-abdullah-althani";
try {
  const response = await fetch(GOODREADS_RSS_URL);
  if (response.ok) {
    const xmlText = await response.text();
    const itemMatches = xmlText.matchAll(/<item>(.*?)<\/item>/gs);
    for (const match of itemMatches) {
      const itemContent = match[1];
      const titleMatch = itemContent.match(/<title>(?:<!\[CDATA\[)?(.*?)(?:\]\]>)?<\/title>/s);
      const linkMatch = itemContent.match(/<link>(.*?)<\/link>/s);
      const title = titleMatch ? titleMatch[1].trim() : null;
      let link: string | null = null;
      if (linkMatch && linkMatch[1]) {
        link = linkMatch[1].replace('<![CDATA[', '').replace(']]>', '').trim();
      }
      if (title && link) {
        currentlyReadingBooks.push({ title, link });
      }
      if (currentlyReadingBooks.length >= 3) break; // Limit to 3 books
    }
  } else {
    console.error(`Goodreads RSS fetch failed: ${response.status}`);
  }
} catch (error) {
  console.error("Error fetching Goodreads:", error);
}


// --- Fetch Trakt Recently Watched (Logic is language-agnostic) ---
interface WatchedItem { id: number; title: string; link: string; type: 'movie' | 'episode' | 'unknown'; overview: string | null; }
let recentlyWatchedItems: WatchedItem[] = [];
const TRAKT_USERNAME = 'althani';
const TRAKT_API_KEY = import.meta.env.TRAKT_API_KEY;
const TRAKT_PROFILE_URL = `https://trakt.tv/users/${TRAKT_USERNAME}`;
if (TRAKT_API_KEY) { try {
    const traktUrl = `https://api.trakt.tv/users/${TRAKT_USERNAME}/history?limit=3&extended=full`;
    // console.log(`Workspaceing Trakt History: ${traktUrl}`); // Optional: uncomment for debugging
    const traktResponse = await fetch(traktUrl, { headers: { 'Content-Type': 'application/json', 'trakt-api-version': '2', 'trakt-api-key': TRAKT_API_KEY }});
    if (traktResponse.ok) {
       const historyData = await traktResponse.json();
       if (historyData && historyData.length > 0) {
          recentlyWatchedItems = historyData.map((item: any): WatchedItem | null => {
             let title = '', link = '#', overview: string | null = null; const type = item.type || 'unknown'; const id = item.id;
             try {
               if (type === 'movie' && item.movie?.ids?.slug) { title = item.movie.title || 'Unknown Movie'; link = `https://trakt.tv/movies/${item.movie.ids.slug}`; overview = item.movie.overview; }
               else if (type === 'episode' && item.show?.ids?.slug && item.episode) { const showTitle = item.show.title || 'Unknown Show'; const season = item.episode.season; const number = item.episode.number; const epTitle = item.episode.title ? ` - ${item.episode.title}` : ''; title = `${showTitle} S${String(season).padStart(2, '0')}E${String(number).padStart(2, '0')}${epTitle}`; link = `https://trakt.tv/shows/${item.show.ids.slug}/seasons/${season}/episodes/${number}`; overview = item.episode.overview || item.show.overview; }
             } catch (e) { return null; }
             if (title && id) { return { id, title, link, type, overview }; } return null;
          }).filter((item): item is WatchedItem => item !== null);
       } // else { console.log("No items found in Trakt history."); }
    } else { console.error(`Trakt fetch failed: ${traktResponse.status}`); }
 } catch (error) { console.error("Error fetching Trakt:", error); }
} else { console.warn("TRAKT_API_KEY not set in .env"); }

// --- Fetch Latest Bluesky Posts (English) ---
interface BlueskyPost { text: string | null; uri: string; cid: string; embedImageUrl?: string; embedLinkUrl?: string; embedLinkTitle?: string; replyParent?: string; reason?: string; labels?: ComAtprotoLabelDefs.Label[]; }
let latestBlueskyPosts: BlueskyPost[] = [];
const BSKY_IDENTIFIER = import.meta.env.BLUESKY_IDENTIFIER;
const BSKY_APP_PASSWORD = import.meta.env.BLUESKY_APP_PASSWORD;
const TARGET_LANG_EN = 'en'; // Target English posts

if (BSKY_IDENTIFIER && BSKY_APP_PASSWORD) { try {
    const agent = new BskyAgent({ service: 'https://bsky.social' });
    await agent.login({ identifier: BSKY_IDENTIFIER, password: BSKY_APP_PASSWORD });
    const response = await agent.app.bsky.feed.getAuthorFeed({ actor: BSKY_IDENTIFIER, limit: 20 });

    if (response.success && response.data.feed.length > 0) {
      latestBlueskyPosts = response.data.feed
        .map((feedItem): BlueskyPost | null => {
            const post = feedItem.post; const reason = feedItem.reason;
            if (!post?.record || !post.uri || !post.cid) return null;
            const langs = post.record.langs as string[] | undefined;
            // FILTER FOR ENGLISH
            if (!langs || !langs.includes(TARGET_LANG_EN)) return null;
            const labels = post.labels as ComAtprotoLabelDefs.Label[] | undefined;
            const hazardousLabels = ['porn', 'sexual', 'nudity'];
            if (labels?.some(label => hazardousLabels.includes(label.val))) return null;
            let embedImageUrl: string | undefined = undefined; let embedLinkUrl: string | undefined = undefined; let embedLinkTitle: string | undefined = undefined;
            if (post.embed?.images && post.embed.$type === 'app.bsky.embed.images#view') { embedImageUrl = post.embed.images[0]?.thumb; }
            else if (post.embed?.external && post.embed.$type === 'app.bsky.embed.external#view') { embedImageUrl = post.embed.external.thumb; embedLinkUrl = post.embed.external.uri; embedLinkTitle = post.embed.external.title;}
            const replyParent = post.record.reply?.parent?.uri;
            return { text: typeof post.record.text === 'string' ? post.record.text : null, uri: post.uri, cid: post.cid, embedImageUrl: embedImageUrl, embedLinkUrl: embedLinkUrl, embedLinkTitle: embedLinkTitle, replyParent: replyParent, reason: reason?.$type };
        })
        .filter((item): item is BlueskyPost => item !== null)
        .filter(item => item.reason !== 'app.bsky.feed.defs#reasonRepost' || item.text)
        .slice(0, 3);
    }
  } catch (error) { console.error("Error fetching Bluesky:", error); }
} else { console.warn("Bluesky credentials not set"); }

// --- Fetch Latest GitHub Events ---
interface GitHubEvent { id: string; display: string; link: string; timeAgo: string; }
let latestGitHubEvents: GitHubEvent[] = [];
const GITHUB_USERNAME = 'l3b';
const GITHUB_PROFILE_URL = `https://github.com/${GITHUB_USERNAME}`;
try {
  const githubUrl = `https://api.github.com/users/${GITHUB_USERNAME}/events/public?per_page=5`;
  const githubResponse = await fetch(githubUrl, { headers: { Accept: 'application/vnd.github.v3+json' } });
  if (githubResponse.ok) {
    const events = await githubResponse.json();
    if (events && events.length > 0) {
      latestGitHubEvents = events
        .map((event: any): GitHubEvent | null => {
          let display = 'performed some activity'; // Default English
          let link = GITHUB_PROFILE_URL;
          let timeAgo = '';
          if (event.created_at) { try { timeAgo = formatDistanceToNow(new Date(event.created_at), { addSuffix: true, locale: enUS }); } catch (e) {} } // Use enUS locale
          const repoName = event.repo?.name;
          const repoUrl = repoName ? `https://github.com/${repoName}` : GITHUB_PROFILE_URL;

          switch (event.type) { // Translate display strings
            case 'PushEvent':
              const commitCount = event.payload?.commits?.length || 0;
              if (commitCount > 0) {
                  const commitMsg = event.payload?.commits?.[0]?.message?.split('\n')[0] || 'update';
                  display = `Pushed ${commitCount} ${commitCount === 1 ? 'commit' : 'commits'} to ${repoName}: "${commitMsg}"`;
                  link = commitCount === 1 && event.payload?.commits?.[0]?.sha ? `https://github.com/${repoName}/commit/${event.payload.commits[0].sha}` : repoUrl;
              } else { display = `Pushed to ${repoName}`; link = repoUrl; }
              break;
            case 'CreateEvent':
              const refType = event.payload?.ref_type;
              if (refType === 'repository') { display = `Created repository ${repoName}`; link = repoUrl; }
              else if (refType === 'branch' && event.payload.ref) { display = `Created branch ${event.payload.ref} in ${repoName}`; link = `https://github.com/${repoName}/tree/${event.payload.ref}`; }
              else { display = `Created ${refType || 'something'} in ${repoName}`; link = repoUrl; }
              break;
            case 'WatchEvent':
              if (event.payload?.action === 'started') { display = `Starred ${repoName}`; link = repoUrl; }
              else return null;
              break;
            case 'ForkEvent':
               display = `Forked ${repoName}`;
               link = event.payload?.forkee?.html_url || repoUrl;
               break;
            case 'PublicEvent':
               display = `Made ${repoName} public`;
               link = repoUrl;
               break;
            default: // Generic English default
              display = `Performed ${event.type.replace('Event','')} in ${repoName || 'GitHub'}`;
              link = repoUrl || GITHUB_PROFILE_URL;
              console.log(`Using generic display for GitHub event type: ${event.type}`);
          }
          return { id: event.id, display, link, timeAgo };
        })
        .filter((item): item is GitHubEvent => item !== null)
        .slice(0, 3);
    }
  } else { console.error(`GitHub API fetch failed: ${githubResponse.status}`); }
} catch (error) { console.error("Error fetching GitHub events:", error); }
---

{/* Use English lang/dir props */}
<BaseLayout title={pageTitle} description={pageDescription} lang="en" dir="ltr">
  <div class="container mx-auto px-4 py-12 md:px-6 md:py-16">

    {/* Page Title & Subtitle */}
    <h1 class="text-4xl md:text-5xl font-bold text-center mb-2 text-soft-charcoal">{pageTitle}</h1>
    <p class="text-lg text-gray-600 text-center mb-12 md:mb-16">{pageSubtitle}</p>

    {/* Grid for Signal Sections */}
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 md:gap-10">

      {/* Section 1: Latest Blog Posts */}
      <section class="card">
        <a href="/en/blog" class="text-electric-blue">
          <h2 class="text-xl font-semibold text-electric-blue mb-3 flex items-center gap-2 flex-shrink-0">
            <Icon name="mdi:post-outline" class="w-6 h-6 flex-shrink-0"/>
            Latest from the Blog
          </h2>
        </a>
        <div class="flex-grow space-y-4">
          {latestEnPost ? (
            <div>
              {latestEnPost.data.featuredImage && (
                <a href={`/en/blog/${latestEnPost.slug.replace(/^en\//, '')}`} class="block mb-4">
                  {latestEnPost.data.featuredImage.r2Path ? (
                    <OptimizedImage 
                      src={`r2://${latestEnPost.data.featuredImage.r2Path}`}
                      alt={latestEnPost.data.featuredImage.alt || `Featured image for ${latestEnPost.data.title}`}
                      width={300}
                      height={128}
                      class="w-full h-32 object-cover rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200"
                    />
                  ) : (
                    <img 
                      src={latestEnPost.data.featuredImage.url} 
                      alt={latestEnPost.data.featuredImage.alt || `Featured image for ${latestEnPost.data.title}`} 
                      class="w-full h-32 object-cover rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200"
                    />
                  )}
                </a>
              )}
              <h3 class="text-lg font-semibold mt-1">
                <a href={`/en/blog/${latestEnPost.slug.replace(/^en\//, '')}`}
                   class="hover:text-teal-600 transition-colors duration-200">
                  <span class="text-soft-charcoal">
                    {latestEnPost.data.title}
                  </span>
                </a>
              </h3>
              {latestEnPost.data.description && (
                <p class="text-gray-600 text-sm leading-relaxed line-clamp-3">
                  {latestEnPost.data.description}
                </p>
              )}
              <a href={`/en/blog/${latestEnPost.slug.replace(/^en\//, '')}`} class="text-teal-600 hover:text-lavender font-medium inline-flex items-center gap-1 text-sm mt-2 flex-shrink-0">
                Read more <span aria-hidden="true">&rarr;</span>
              </a>
            </div>
          ) : (
            <p class="italic text-gray-400">No English blog posts found.</p>
          )}
        </div>
      </section>

      {/* Section 2: Goodreads Currently Reading */}
       <section class="card">
         <a href={GOODREADS_PROFILE_URL} target="_blank" rel="noopener noreferrer" class="text-electric-blue">
           <h2 class="text-xl font-semibold text-electric-blue mb-4 flex items-center gap-2 flex-shrink-0">
             <Icon name="simple-icons:goodreads" class="w-6 h-6 flex-shrink-0"/>
             Currently Reading
           </h2>
         </a>
         <div class="flex-grow">
           {currentlyReadingBooks.length > 0 ? (
              <div class="space-y-3">
                {currentlyReadingBooks.map(book => (
                  <a href={book.link} target="_blank" rel="noopener noreferrer" class="hover:text-teal-600 transition-colors duration-200 block">
                     <p class="text-soft-charcoal text-lg font-semibold leading-snug">
                        {book.title}
                     </p>
                  </a>
                ))}
              </div>
           ) : ( <p class="italic text-gray-400">(No books currently reading or failed to fetch...)</p> )}
         </div>
         <a href={GOODREADS_PROFILE_URL} target="_blank" rel="noopener noreferrer" class="text-xs text-gray-500 hover:text-lavender mt-4 flex-shrink-0 self-start">
            My Goodreads Profile &rarr;
         </a>
       </section>

      {/* Section 3: Trakt Recently Watched */}
       <section class="card">
        <a href={TRAKT_PROFILE_URL} target="_blank" rel="noopener noreferrer" class="text-electric-blue">
          <h2 class="text-xl font-semibold text-electric-blue mb-4 flex items-center gap-2 flex-shrink-0">
              <Icon name="simple-icons:trakt" class="w-6 h-6 flex-shrink-0"/>
              Recently Watched
          </h2>
        </a>
         {recentlyWatchedItems.length > 0 ? (
            <div class="flex-grow">
              <ul class="space-y-4">
                {recentlyWatchedItems.map(item => (
                  <li key={item.id}>
                    <a href={item.link} target="_blank" rel="noopener noreferrer" class="hover:text-teal-600 transition-colors duration-200 block group">
                       <p class="text-soft-charcoal text-base font-medium leading-snug group-hover:text-teal-600">
                          {item.type === 'movie' ? '🎬 ' : '📺 '}
                          {item.title}
                       </p>
                    </a>
                     {item.overview && (
                       <p class="text-xs text-gray-500 leading-normal mt-1 line-clamp-2">
                         {item.overview}
                       </p>
                     )}
                  </li>
                ))}
              </ul>
            </div>
         ) : ( <p class="italic text-gray-400 flex-grow">(No recent watched history found or failed to fetch...)</p> )} {/* English Fallback */}
           <a href={TRAKT_PROFILE_URL} target="_blank" rel="noopener noreferrer" class="text-xs text-gray-500 hover:text-lavender mt-4 flex-shrink-0 self-start">
              My Trakt Profile &rarr; {/* English Link Text */}
           </a>
       </section>

       {/* Section 4: Bluesky Posts */}
       <section class="card">
         <h2 class="text-xl font-semibold text-electric-blue mb-4 flex items-center gap-2 flex-shrink-0">
           <Icon name="simple-icons:bluesky" class="w-6 h-6 flex-shrink-0"/>
           From Bluesky {/* English Heading */}
         </h2>
         {latestBlueskyPosts.length > 0 ? (
            <div class="flex-grow space-y-5">
              {latestBlueskyPosts.map(post => {
                 const postUrl = `https://bsky.app/profile/${BSKY_IDENTIFIER}/post/${post.uri?.split('/').pop() ?? ''}`;
                 return (
                    <div class="pb-5 border-b border-gray-100 last:border-b-0 last:pb-0" key={post.cid}>
                      {post.embedImageUrl && ( <a href={post.embedLinkUrl || postUrl} /* ... */ > <img src={post.embedImageUrl} /* ... */ /> </a> )}
                      {post.text && ( <p class="text-soft-charcoal text-base leading-relaxed mb-2 line-clamp-4">{post.text}</p> )}
                      {!post.text && post.embedLinkTitle && post.embedLinkUrl && ( <p class="text-soft-charcoal text-base leading-relaxed mb-2 line-clamp-4"><em class="text-gray-500">[Shared Link]:</em> {post.embedLinkTitle}</p> )}
                      <a href={postUrl} target="_blank" rel="noopener noreferrer" class="text-teal-600 hover:text-lavender font-medium inline-flex items-center gap-1 text-xs">
                         View on Bluesky <span aria-hidden="true">&rarr;</span> {/* English Link Text */}
                      </a>
                    </div>
                 )
              })}
            </div>
         ) : ( <p class="italic text-gray-400 flex-grow">(No recent English posts found or failed to fetch...)</p> )} {/* English Fallback */}
       </section>

       {/* Section 5: Strava Activity Widget (iframe src is language-agnostic) */}
       <section class="card">
         <h2 class="text-xl font-semibold text-electric-blue mb-4 flex items-center gap-2 self-start">
           <Icon name="simple-icons:strava" class="w-6 h-6 flex-shrink-0"/>
           Latest Activity {/* English Heading */}
         </h2>
         <iframe height='454' width='300' frameborder='0' allowtransparency='true' scrolling='no' src='https://www.strava.com/athletes/7746516/latest-rides/930be949cf2c3e5601bb81846be00cc7f1fd01ac' class="mt-2"></iframe>
       </section>

      {/* Section 6: GitHub Latest Events (Display logic is language-agnostic, but time uses locale) */}
      <section class="card">
        <h2 class="text-xl font-semibold text-electric-blue mb-4 flex items-center gap-2 flex-shrink-0">
           <Icon name="simple-icons:github" class="w-6 h-6 flex-shrink-0"/>
           From GitHub {/* English Heading */}
        </h2>
        <div class="flex-grow">
          {latestGitHubEvents.length > 0 ? (
             <ul class="space-y-3">
               {latestGitHubEvents.map(event => (
                 <li key={event.id}>
                   <a href={event.link} target="_blank" rel="noopener noreferrer" class="hover:text-teal-600 transition-colors duration-200 group">
                      <p class="text-soft-charcoal text-sm leading-relaxed group-hover:text-teal-600">
                         {event.display} {/* Display string translated in frontmatter */}
                      </p>
                   </a>
                   <p class="text-xs text-gray-500 mt-1">{event.timeAgo}</p> {/* timeAgo formatted with enUS */}
                 </li>
               ))}
             </ul>
          ) : ( <p class="italic text-gray-400">(No recent public activity found or failed to fetch...)</p> )} {/* English Fallback */}
        </div>
        <a href={GITHUB_PROFILE_URL} target="_blank" rel="noopener noreferrer" class="text-xs text-gray-500 hover:text-lavender mt-4 flex-shrink-0 self-start">
           My GitHub Profile &rarr; {/* English Link Text */}
        </a>
      </section>


    </div> {/* End Grid */}
  </div> {/* End Container */}
</BaseLayout>