---
// src/pages/ar/index.astro - Homepage v15 (With Strava API Integration)
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { Icon } from 'astro-icon/components';
import { BskyAgent, type ComAtprotoLabelDefs } from '@atproto/api';
import OptimizedImage from '../../components/OptimizedImage.astro';
import StravaStats from '../../components/StravaStats.astro';
import EmptyState from '../../components/EmptyState.astro';
import { formatDistanceToNow } from 'date-fns'; // For relative time
import { arSA } from 'date-fns/locale'; // For Arabic relative time

const pageTitle = "الواجهة";
const pageSubtitle = "لقطة حيّة من عالمي الرقمي";
const pageDescription = "الواجهة الرقمية لـ عبدالله: استكشاف الأفكار والتجارب عبر مختلف الإشارات.";

// --- Fetch Latest Blog Post ---
let latestArPosts = [];
try {
    latestArPosts = (await getCollection('blog', ({ data, slug }) => {
        return slug.startsWith('ar/') && data.isDraft !== true;
    })).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()).slice(0, 3);
} catch (e) { console.error("Error fetching blog posts:", e); }


// --- Fetch Goodreads Currently Reading ---
interface ReadingBook { title: string; link: string; }
let currentlyReadingBooks: ReadingBook[] = [];
const GOODREADS_RSS_URL = "https://www.goodreads.com/review/list_rss/4693662?shelf=currently-reading";
const GOODREADS_PROFILE_URL = "https://www.goodreads.com/user/show/4693662-abdullah-althani";
try {
  const response = await fetch(GOODREADS_RSS_URL);
  if (response.ok) {
     const xmlText = await response.text();
     const itemMatches = xmlText.matchAll(/<item>(.*?)<\/item>/gs);
     for (const match of itemMatches) {
        const itemContent = match[1];
        const titleMatch = itemContent.match(/<title>(?:<!\[CDATA\[)?(.*?)(?:\]\]>)?<\/title>/s);
        const linkMatch = itemContent.match(/<link>(.*?)<\/link>/s);
        const title = titleMatch ? titleMatch[1].trim() : null;
        let link: string | null = null;
        if (linkMatch && linkMatch[1]) { link = linkMatch[1].replace('<![CDATA[', '').replace(']]>', '').trim(); }
        if (title && link) { currentlyReadingBooks.push({ title, link }); }
        if (currentlyReadingBooks.length >= 3) break;
     }
  } else { console.error(`Goodreads RSS fetch failed: ${response.status}`); }
} catch (error) { console.error("Error fetching Goodreads:", error); }


// --- Fetch Trakt Recently Watched ---
interface WatchedItem { id: number; title: string; link: string; type: 'movie' | 'episode' | 'unknown'; overview: string | null; }
let recentlyWatchedItems: WatchedItem[] = [];
const TRAKT_USERNAME = 'althani';
const TRAKT_API_KEY = import.meta.env.TRAKT_API_KEY;
const TRAKT_PROFILE_URL = `https://trakt.tv/users/${TRAKT_USERNAME}`;
if (TRAKT_API_KEY) { try {
    const traktUrl = `https://api.trakt.tv/users/${TRAKT_USERNAME}/history?limit=3&extended=full&languages=ar`;
    // console.log(`Fetching Trakt History: ${traktUrl}`); // Optional: uncomment for debugging
    const traktResponse = await fetch(traktUrl, { headers: { 
      'Content-Type': 'application/json', 
      'trakt-api-version': '2', 
      'trakt-api-key': TRAKT_API_KEY,
      'Accept-Language': 'ar' // Request Arabic translations
    }});
    if (traktResponse.ok) {
       const historyData = await traktResponse.json();
       if (historyData && historyData.length > 0) {
          recentlyWatchedItems = historyData.map((item: any): WatchedItem | null => {
             let title = '', link = '#', overview: string | null = null; const type = item.type || 'unknown'; const id = item.id;
             try {
               if (type === 'movie' && item.movie?.ids?.slug) { 
                 // Check for Arabic title in translations or use English
                 title = item.movie.title || 'فيلم غير معروف'; 
                 link = `https://trakt.tv/movies/${item.movie.ids.slug}`; 
                 overview = item.movie.overview; 
               }
               else if (type === 'episode' && item.show?.ids?.slug && item.episode) { 
                 const showTitle = item.show.title || 'مسلسل غير معروف'; 
                 const season = item.episode.season; 
                 const number = item.episode.number; 
                 const epTitle = item.episode.title ? ` - ${item.episode.title}` : ''; 
                 title = `${showTitle} م${String(season).padStart(2, '0')}ح${String(number).padStart(2, '0')}${epTitle}`; 
                 link = `https://trakt.tv/shows/${item.show.ids.slug}/seasons/${season}/episodes/${number}`; 
                 overview = item.episode.overview || item.show.overview; 
               }
             } catch (e) { return null; }
             if (title && id) { return { id, title, link, type, overview }; } return null;
          }).filter((item): item is WatchedItem => item !== null);
       } // else { console.log("No items found in Trakt history."); }
    } else { console.error(`Trakt fetch failed: ${traktResponse.status}`); }
 } catch (error) { console.error("Error fetching Trakt:", error); }
} else { console.warn("TRAKT_API_KEY not set in .env"); }


// --- Fetch Latest Bluesky Posts (Arabic) ---
interface BlueskyPost { text: string | null; uri: string; cid: string; embedImageUrl?: string; embedLinkUrl?: string; embedLinkTitle?: string; replyParent?: string; reason?: string; labels?: ComAtprotoLabelDefs.Label[]; }
let latestBlueskyPosts: BlueskyPost[] = [];
const BSKY_IDENTIFIER = import.meta.env.BLUESKY_IDENTIFIER;
const BSKY_APP_PASSWORD = import.meta.env.BLUESKY_APP_PASSWORD;
const TARGET_LANG = 'ar';

if (BSKY_IDENTIFIER && BSKY_APP_PASSWORD) { try {
    // console.log(`Attempting Bluesky login for: ${BSKY_IDENTIFIER}`); // Optional: uncomment for debugging
    const agent = new BskyAgent({ service: 'https://bsky.social' });
    await agent.login({ identifier: BSKY_IDENTIFIER, password: BSKY_APP_PASSWORD });
    // console.log("Bluesky login successful. Fetching feed..."); // Optional: uncomment for debugging
    const response = await agent.app.bsky.feed.getAuthorFeed({ actor: BSKY_IDENTIFIER, limit: 20 }); // Fetch more to filter

    if (response.success && response.data.feed.length > 0) {
      latestBlueskyPosts = response.data.feed
        .map((feedItem): BlueskyPost | null => { /* ... (mapping logic from previous step) ... */
            const post = feedItem.post; const reason = feedItem.reason;
            if (!post?.record || !post.uri || !post.cid) return null;
            const langs = post.record.langs as string[] | undefined;
            if (!langs || !langs.includes(TARGET_LANG)) return null;
            const labels = post.labels as ComAtprotoLabelDefs.Label[] | undefined;
            const hazardousLabels = ['porn', 'sexual', 'nudity']; // Example filter
            if (labels?.some(label => hazardousLabels.includes(label.val))) return null;
            let embedImageUrl: string | undefined = undefined; let embedLinkUrl: string | undefined = undefined; let embedLinkTitle: string | undefined = undefined;
            if (post.embed?.images && post.embed.$type === 'app.bsky.embed.images#view') { embedImageUrl = post.embed.images[0]?.thumb; }
            else if (post.embed?.external && post.embed.$type === 'app.bsky.embed.external#view') { embedImageUrl = post.embed.external.thumb; embedLinkUrl = post.embed.external.uri; embedLinkTitle = post.embed.external.title;}
            const replyParent = post.record.reply?.parent?.uri;
            return { text: typeof post.record.text === 'string' ? post.record.text : null, uri: post.uri, cid: post.cid, embedImageUrl: embedImageUrl, embedLinkUrl: embedLinkUrl, embedLinkTitle: embedLinkTitle, replyParent: replyParent, reason: reason?.$type };
        })
        .filter((item): item is BlueskyPost => item !== null)
        .filter(item => item.reason !== 'app.bsky.feed.defs#reasonRepost' || item.text) // Filter simple reposts
        .slice(0, 3); // Take top 3
    } // else { console.log("Bluesky feed is empty or fetch failed."); }
  } catch (error) { console.error("Error fetching Bluesky:", error); }
} else { console.warn("Bluesky credentials not set in .env"); }

// --- Fetch Latest GitHub Events (Fetch 5, Process up to 3) ---
interface GitHubEvent { id: string; display: string; link: string; timeAgo: string; }
let latestGitHubEvents: GitHubEvent[] = []; // Now an array
const GITHUB_USERNAME = 'l3b';
const GITHUB_PROFILE_URL = `https://github.com/${GITHUB_USERNAME}`;

try {
  const githubUrl = `https://api.github.com/users/${GITHUB_USERNAME}/events/public?per_page=5`; // Fetch 5 events
  console.log(`Fetching GitHub Events: ${githubUrl}`); // Log fetch URL
  const githubResponse = await fetch(githubUrl, {
    headers: { Accept: 'application/vnd.github.v3+json' }
  });

  if (githubResponse.ok) {
    const events = await githubResponse.json();
    if (events && events.length > 0) {
      latestGitHubEvents = events
        .map((event: any): GitHubEvent | null => { // Map each event
          let display = ' قام بنشاط ما';
          let link = GITHUB_PROFILE_URL;
          let timeAgo = '';

          if (event.created_at) {
            try {
              timeAgo = formatDistanceToNow(new Date(event.created_at), { addSuffix: true, locale: arSA });
            } catch (dateError) { console.error("GitHub Date formatting error", dateError)}
          }

          const repoName = event.repo?.name;
          const repoUrl = repoName ? `https://github.com/${repoName}` : GITHUB_PROFILE_URL;

          switch (event.type) {
            case 'PushEvent':
              const commitCount = event.payload?.commits?.length || 0;
              if (commitCount > 0) {
                  const commitMsg = event.payload?.commits?.[0]?.message?.split('\n')[0] || 'تحديث';
                  display = `دفع ${commitCount} ${commitCount === 1 ? 'تغيير' : 'تغييرات'} إلى ${repoName}: "${commitMsg}"`;
                  link = commitCount === 1 && event.payload?.commits?.[0]?.sha ? `https://github.com/${repoName}/commit/${event.payload.commits[0].sha}` : repoUrl;
              } else {
                  display = `دفع إلى ${repoName}`; // Handle case with no commits listed?
                  link = repoUrl;
              }
              break;
            case 'CreateEvent':
              const refType = event.payload?.ref_type;
              if (refType === 'repository') { display = `أنشأ المستودع ${repoName}`; link = repoUrl; }
              else if (refType === 'branch' && event.payload.ref) { display = `أنشأ الفرع ${event.payload.ref} في ${repoName}`; link = `https://github.com/${repoName}/tree/${event.payload.ref}`; }
              else { display = `أنشأ ${refType || 'شيئًا'} في ${repoName}`; link = repoUrl; }
              break;
            case 'WatchEvent': // Event for starring
              if (event.payload?.action === 'started') { display = `تابع المستودع ${repoName}`; link = repoUrl; }
              else return null; // Ignore unstar events for this display
              break;
            case 'ForkEvent':
               display = `أنشأ نسخة من ${repoName}`;
               link = event.payload?.forkee?.html_url || repoUrl;
               break;
            case 'PublicEvent':
               display = `جعل المستودع ${repoName} عامًا`;
               link = repoUrl;
               break;
            // Add cases for IssuesEvent, PullRequestEvent etc. if desired
            default:
              console.log(`Unhandled GitHub event type: ${event.type} for ${repoName}`);
              return null; // Don't display unhandled event types
          }

          return { id: event.id, display, link, timeAgo };

        })
        .filter((item): item is GitHubEvent => item !== null) // Filter out nulls (unhandled/ignored events)
        .slice(0, 3); // Take the latest 3 valid events

      console.log(`Found ${latestGitHubEvents.length} displayable GitHub events.`);

    } else {
      console.log("No public events returned for GitHub user.");
    }
  } else {
    console.error(`GitHub API fetch failed: ${githubResponse.status} ${githubResponse.statusText}`);
  }
} catch (error) {
  console.error("Error fetching GitHub events:", error);
}
---

<BaseLayout title={pageTitle} description={pageDescription} lang="ar" dir="rtl">
  <div class="container mx-auto px-4 py-12 md:px-6 md:py-16">

    {/* Page Title & Subtitle */}
    <h1 class="text-4xl md:text-5xl font-bold text-center mb-2 text-soft-charcoal">{pageTitle}</h1>
    <p class="text-lg text-gray-600 text-center mb-12 md:mb-16">{pageSubtitle}</p>

    {/* Dynamic Grid Layout with Different Card Sizes */}
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-12 gap-6 md:gap-8 auto-rows-min">

      {/* Section 1: Latest Blog Post - Large Card */}
      <section class="card card-accent-blog md:col-span-2 lg:col-span-8 lg:row-span-2">
        <a href="/ar/blog" class="block">
          <h2 class="text-2xl font-bold text-electric-blue mb-4 flex items-center gap-2 flex-shrink-0 hover:text-teal transition-colors">
            <Icon name="mdi:post-outline" class="w-7 h-7 flex-shrink-0"/>
            أحدث ما في المدونة
          </h2>
        </a>
          {latestArPosts.length > 0 ? (
          <div class="flex-grow space-y-4">
            {latestArPosts.map(post => (
              <div class="space-y-2">
                {post.data.featuredImage && (
                  <a href={`/ar/blog/${post.slug.replace(/^ar\//, '')}`} class="block mb-4">
                    {post.data.featuredImage.r2Path ? (
                      <OptimizedImage 
                        src={`r2://${post.data.featuredImage.r2Path}`}
                        alt={post.data.featuredImage.alt || `صورة توضيحية لـ ${post.data.title}`}
                        width={300}
                        height={128}
                        class="w-full h-32 object-cover rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200"
                      />
                    ) : (
                      <img 
                        src={post.data.featuredImage.url} 
                        alt={post.data.featuredImage.alt || `صورة توضيحية لـ ${post.data.title}`} 
                        class="w-full h-32 object-cover rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200"
                      />
                    )}
                  </a>
                )}
                <h3 class="text-lg font-semibold">
                  <a href={`/ar/blog/${post.slug.replace(/^ar\//, '')}`}
                     class="hover:text-teal-600 transition-colors duration-200">
                    <span class="text-soft-charcoal">
                      {post.data.title}
                    </span>
                  </a>
                </h3>
                {post.data.description && (
                  <p class="text-gray-600 text-sm leading-relaxed line-clamp-2">
                    {post.data.description}
                  </p>
                )}
              </div>
            ))}
          </div>
          ) : (
            <EmptyState 
              message="لا توجد مقالات حديثة حالياً"
              icon="mdi:post-outline"
              locale="ar"
            />
          )}
          <a href="/ar/blog" class="text-teal-600 hover:text-lavender font-medium inline-flex items-center gap-1 text-sm mt-6 flex-shrink-0">
            كل المقالات <span aria-hidden="true">&larr;</span>
          </a>
        </section>

      {/* Section 2: Strava Activity - Prominent Position */}
      <section class="card card-accent-fitness md:col-span-1 lg:col-span-4 lg:row-span-2">
        <a href="https://www.strava.com/athletes/7746516" target="_blank" rel="noopener noreferrer" class="block">
          <h2 class="text-xl font-semibold text-electric-blue mb-4 flex items-center gap-2 flex-shrink-0 hover:text-teal transition-colors">
            <Icon name="simple-icons:strava" class="w-6 h-6 flex-shrink-0"/>
            آخر نشاط رياضي
          </h2>
        </a>
         <div class="flex-grow">
           <StravaStats />
         </div>
       </section>

      {/* Section 3: Bluesky Posts - Medium Card */}
       <section class="card card-accent-social md:col-span-1 lg:col-span-6">
        <a href="https://bsky.app/profile/abdla.box" target="_blank" rel="noopener noreferrer" class="block">
          <h2 class="text-xl font-semibold text-electric-blue mb-4 flex items-center gap-2 flex-shrink-0 hover:text-teal transition-colors">
            <Icon name="simple-icons:bluesky" class="w-6 h-6 flex-shrink-0"/>
            من Bluesky
          </h2>
        </a>
         {latestBlueskyPosts.length > 0 ? (
            <div class="flex-grow space-y-5">
              {latestBlueskyPosts.map(post => {
                 const postUrl = `https://bsky.app/profile/${BSKY_IDENTIFIER}/post/${post.uri?.split('/').pop() ?? ''}`;
                 return (
                    <div class="pb-5 border-b border-gray-100 last:border-b-0 last:pb-0" key={post.cid}>
                      {post.embedImageUrl && (
                        <a href={post.embedLinkUrl || postUrl} target="_blank" rel="noopener noreferrer" class="block mb-2">
                          <img src={post.embedImageUrl} alt={post.embedLinkTitle || 'Bluesky Embed Image'} class="max-w-full h-auto rounded-md border border-gray-200" loading="lazy"/>
                         </a>
                      )}
                      {post.text && (
                        <p class="text-soft-charcoal text-base leading-relaxed mb-2 line-clamp-4">
                           {post.text}
                        </p>
                      )}
                      {!post.text && post.embedLinkTitle && post.embedLinkUrl && (
                         <p class="text-soft-charcoal text-base leading-relaxed mb-2 line-clamp-4">
                            <em class="text-gray-500">[رابط مشترك]:</em> {post.embedLinkTitle}
                         </p>
                      )}
                      <a href={postUrl} target="_blank" rel="noopener noreferrer" class="text-teal-600 hover:text-lavender font-medium inline-flex items-center gap-1 text-xs">
                         عرض على Bluesky <span aria-hidden="true">←</span>
                      </a>
                    </div>
                 )
              })}
            </div>
         ) : (
            <EmptyState 
              message="لم يتم العثور على منشورات حديثة باللغة العربية"
              icon="simple-icons:bluesky"
              locale="ar"
            />
         )}
       </section>

       {/* Section 4: GitHub Latest Events - Compact Card */}
       <section class="card card-compact card-accent-code md:col-span-1 lg:col-span-6">
         <a href="https://github.com/l3b" target="_blank" rel="noopener noreferrer" class="block">
           <h2 class="text-lg font-semibold text-electric-blue mb-3 flex items-center gap-2 flex-shrink-0 hover:text-teal transition-colors">
             <Icon name="simple-icons:github" class="w-5 h-5 flex-shrink-0"/>
             من GitHub
           </h2>
         </a>
         <div class="flex-grow">
           {latestGitHubEvents.length > 0 ? (
              <ul class="space-y-2">
                {latestGitHubEvents.map(event => (
                  <li key={event.id}>
                    <a href={event.link} target="_blank" rel="noopener noreferrer" class="hover:text-teal-600 transition-colors duration-200 group">
                       <p class="text-soft-charcoal text-sm leading-relaxed group-hover:text-teal-600">
                          {event.display}
                       </p>
                    </a>
                    <p class="text-xs text-gray-500 mt-1">{event.timeAgo}</p>
                  </li>
                ))}
              </ul>
           ) : (
              <EmptyState 
                message="لا يوجد نشاط حديث"
                icon="simple-icons:github"
                locale="ar"
              />
           )}
         </div>
         <a href={GITHUB_PROFILE_URL} target="_blank" rel="noopener noreferrer" class="text-xs text-gray-500 hover:text-lavender mt-3 flex-shrink-0 self-start">
            ملفي على GitHub &larr;
         </a>
       </section>

       {/* Section 5: Goodreads Currently Reading - Compact Card */}
       <section class="card card-compact card-accent-reading md:col-span-1 lg:col-span-4">
         <a href="https://www.goodreads.com/user/show/4693662-abdullah-althani" target="_blank" rel="noopener noreferrer" class="block">
           <h2 class="text-lg font-semibold text-electric-blue mb-3 flex items-center gap-2 flex-shrink-0 hover:text-teal transition-colors">
             <Icon name="simple-icons:goodreads" class="w-5 h-5 flex-shrink-0"/>
             أقرأ الآن
           </h2>
         </a>
         <div class="flex-grow">
           {currentlyReadingBooks.length > 0 ? (
              <div class="space-y-2">
                {currentlyReadingBooks.map(book => (
                  <a href={book.link} target="_blank" rel="noopener noreferrer" class="hover:text-teal-600 transition-colors duration-200 block">
                     <p class="text-soft-charcoal text-sm font-medium leading-snug">
                        {book.title}
                     </p>
                  </a>
                ))}
              </div>
           ) : (
              <EmptyState 
                message="لا يوجد كتب حاليًا"
                icon="simple-icons:goodreads"
                locale="ar"
              />
           )}
         </div>
         <a href={GOODREADS_PROFILE_URL} target="_blank" rel="noopener noreferrer" class="text-xs text-gray-500 hover:text-lavender mt-3 flex-shrink-0 self-start">
            ملفي على Goodreads &larr;
         </a>
       </section>

       {/* Section 6: Trakt Recently Watched - Compact Card */}
       <section class="card card-compact card-accent-entertainment md:col-span-1 lg:col-span-4">
         <a href="https://trakt.tv/users/althani" target="_blank" rel="noopener noreferrer" class="block">
           <h2 class="text-lg font-semibold text-electric-blue mb-3 flex items-center gap-2 flex-shrink-0 hover:text-teal transition-colors">
             <Icon name="simple-icons:trakt" class="w-5 h-5 flex-shrink-0"/>
             شاهدت مؤخرًا
           </h2>
         </a>
         {recentlyWatchedItems.length > 0 ? (
            <div class="flex-grow">
              <ul class="space-y-2">
                {recentlyWatchedItems.map(item => (
                  <li key={item.id}>
                    <a href={item.link} target="_blank" rel="noopener noreferrer" class="hover:text-teal-600 transition-colors duration-200 block group">
                       <p class="text-soft-charcoal text-sm font-medium leading-snug group-hover:text-teal-600">
                          {item.type === 'movie' ? '🎬 ' : '📺 '}
                          {item.title}
                       </p>
                    </a>
                     {item.overview && (
                       <p class="text-xs text-gray-500 leading-normal mt-1 line-clamp-1">
                         {item.overview}
                       </p>
                     )}
                  </li>
                ))}
              </ul>
            </div>
         ) : (
            <EmptyState 
              message="لم يتم العثور على سجل مشاهدة حديث"
              icon="simple-icons:trakt"
              locale="ar"
            />
         )}
         <a href={TRAKT_PROFILE_URL} target="_blank" rel="noopener noreferrer" class="text-xs text-gray-500 hover:text-lavender mt-3 flex-shrink-0 self-start">
            ملفي على Trakt &larr;
         </a>
       </section>

    </div> {/* End Grid */}
  </div> {/* End Container */}
</BaseLayout>