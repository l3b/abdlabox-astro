---
// src/components/Header.astro - Styled Version 1
const siteTitle = "Abdla";

// --- Language Switcher Logic ---
import { getCollection } from 'astro:content';
import { getBlogTranslation } from '../utils/i18n';
import { Icon } from 'astro-icon/components';

const currentPath = Astro.url.pathname;
const currentLocale = Astro.currentLocale || (currentPath.startsWith('/ar') ? 'ar' : 'en');
let alternateLocale = currentLocale === 'en' ? 'ar' : 'en';
let alternateLocaleName = currentLocale === 'en' ? 'العربية' : 'English';
let alternatePath = '';

// Check if we're on a blog post page
const blogPostMatch = currentPath.match(new RegExp(`/${currentLocale}/blog/([^/]+)`));
if (blogPostMatch) {
  const slug = `${currentLocale}/${blogPostMatch[1]}`;
  const allPosts = await getCollection('blog');
  const currentPost = allPosts.find(post => post.slug === slug);

  if (currentPost) {
    const translatedPost = await getBlogTranslation(currentPost);
    if (translatedPost) {
      alternatePath = `/${alternateLocale}/blog/${translatedPost.slug.split('/').pop()}`;
    } else {
      alternatePath = `/${alternateLocale}/blog/`;
    }
  }
} else {
  // For non-blog pages, just switch the language prefix
  alternatePath = currentPath.replace(new RegExp(`^/${currentLocale}`), `/${alternateLocale}`);
}

// Fallback to homepage if path doesn't exist
if (!alternatePath || alternatePath === currentPath) {
  alternatePath = `/${alternateLocale}/`;
}
// --- End Language Switcher Logic ---

// --- Define navigation links ---
const navLinks = [
    { name: currentLocale === 'en' ? 'Home' : 'الرئيسية', href: `/${currentLocale}/` },
    { name: currentLocale === 'en' ? 'Blog' : 'المدونة', href: `/${currentLocale}/blog/` },
    { name: currentLocale === 'en' ? 'Behind the Dunes?' : 'من وراء الكثبان؟', href: `/${currentLocale}/about/` },
    { name: currentLocale === 'en' ? 'Send a Signal' : 'أرسل إشارة', href: `/${currentLocale}/contact/` },
];
// --- End NavLinks Definition ---
---
{/* Header with Electric Dunes styling */}
<header class="header"> {/* Added shadow, sticky */}
  {/* Container with padding, flex layout, controls alignment and spacing */}
  <div class="container mx-auto flex flex-wrap items-center justify-between p-4 gap-x-6 gap-y-2">

    {/* Site Title - Larger, bold, hover effect */}
    <div class="site-title text-2xl font-bold tracking-tight"> {/* Adjusted size/tracking */}
        <a href={`/${currentLocale}/`} class="hover:text-neon-yellow transition-colors duration-200">{siteTitle}</a>
    </div>

    {/* Navigation Links - Adjusted spacing, hover, active state (basic) */}
    <nav class="flex gap-5 md:gap-8 text-base items-center"> {/* Adjusted gap */}
        {navLinks.map(link => {
            // Basic check if the current path starts with the link href (for active state)
            const isActive = currentPath === link.href || (link.href !== `/${currentLocale}/` && currentPath.startsWith(link.href));
            return (
                <a
                    href={link.href}
                    class:list={[
                        "pb-1 border-b-2 transition-colors duration-200",
                        isActive
                            ? "border-neon-yellow text-neon-yellow" // Active state style
                            : "border-transparent hover:border-neon-yellow/70 hover:text-cool-light-gray/80" // Normal state + hover
                    ]}
                >
                    {link.name}
                </a>
            );
        })}
        {/* Language Switcher Button */}
        {alternateLocale && !currentPath.includes('/tags/') && (
          <a href={alternatePath} class="text-white hover:text-neon-yellow ml-4 flex items-center gap-1">
            <Icon name="mdi:translate" class="w-5 h-5" />
            <span class="sr-only">{currentLocale === 'en' ? 'عربي' : 'English'}</span>
          </a>
        )}
        {/* Theme Toggle Button */}
        <button id="themeToggle" class="ml-4">
          <Icon name="mdi:theme-light-dark" class="w-6 h-6" />
        </button>
    </nav>

  </div>
</header>

<script>
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  })();

  if (theme === 'light') {
    document.documentElement.classList.remove('dark');
  } else {
    document.documentElement.classList.add('dark');
  }

  window.localStorage.setItem('theme', theme);

  const handleToggleClick = () => {
    const element = document.documentElement;
    element.classList.toggle("dark");

    const isDark = element.classList.contains("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
  }

  document.getElementById("themeToggle").addEventListener("click", handleToggleClick);
</script>